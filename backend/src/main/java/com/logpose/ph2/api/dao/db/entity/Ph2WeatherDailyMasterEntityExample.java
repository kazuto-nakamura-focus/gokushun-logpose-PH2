package com.logpose.ph2.api.dao.db.entity;

import java.util.ArrayList;
import java.util.List;
import java.util.Date;

public class Ph2WeatherDailyMasterEntityExample {
    /**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table ph2_weather_daily_master
	 * @mbg.generated
	 */
	protected String orderByClause;
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table ph2_weather_daily_master
	 * @mbg.generated
	 */
	protected boolean distinct;
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table ph2_weather_daily_master
	 * @mbg.generated
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ph2_weather_daily_master
	 * @mbg.generated
	 */
	public Ph2WeatherDailyMasterEntityExample()
		{
		oredCriteria = new ArrayList<>();
		}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ph2_weather_daily_master
	 * @mbg.generated
	 */
	public void setOrderByClause(String orderByClause)
		{
		this.orderByClause = orderByClause;
		}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ph2_weather_daily_master
	 * @mbg.generated
	 */
	public String getOrderByClause()
		{
		return orderByClause;
		}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ph2_weather_daily_master
	 * @mbg.generated
	 */
	public void setDistinct(boolean distinct)
		{
		this.distinct = distinct;
		}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ph2_weather_daily_master
	 * @mbg.generated
	 */
	public boolean isDistinct()
		{
		return distinct;
		}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ph2_weather_daily_master
	 * @mbg.generated
	 */
	public List<Criteria> getOredCriteria()
		{
		return oredCriteria;
		}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ph2_weather_daily_master
	 * @mbg.generated
	 */
	public void or(Criteria criteria)
		{
		oredCriteria.add(criteria);
		}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ph2_weather_daily_master
	 * @mbg.generated
	 */
	public Criteria or()
		{
		Criteria criteria = createCriteriaInternal();
		oredCriteria.add(criteria);
		return criteria;
		}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ph2_weather_daily_master
	 * @mbg.generated
	 */
	public Criteria createCriteria()
		{
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0)
			{
			oredCriteria.add(criteria);
			}
		return criteria;
		}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ph2_weather_daily_master
	 * @mbg.generated
	 */
	protected Criteria createCriteriaInternal()
		{
		Criteria criteria = new Criteria();
		return criteria;
		}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ph2_weather_daily_master
	 * @mbg.generated
	 */
	public void clear()
		{
		oredCriteria.clear();
		orderByClause = null;
		distinct = false;
		}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to the database table ph2_weather_daily_master
	 * @mbg.generated
	 */
	protected abstract static class GeneratedCriteria
		{
		protected List<Criterion> criteria;

		protected GeneratedCriteria()
			{
			super();
			criteria = new ArrayList<>();
			}

		public boolean isValid()
			{
			return criteria.size() > 0;
			}

		public List<Criterion> getAllCriteria()
			{
			return criteria;
			}

		public List<Criterion> getCriteria()
			{
			return criteria;
			}

		protected void addCriterion(String condition)
			{
			if (condition == null)
				{
				throw new RuntimeException("Value for condition cannot be null");
				}
			criteria.add(new Criterion(condition));
			}

		protected void addCriterion(String condition, Object value, String property)
			{
			if (value == null)
				{
				throw new RuntimeException("Value for " + property + " cannot be null");
				}
			criteria.add(new Criterion(condition, value));
			}

		protected void addCriterion(String condition, Object value1, Object value2, String property)
			{
			if (value1 == null || value2 == null)
				{
				throw new RuntimeException("Between values for " + property + " cannot be null");
				}
			criteria.add(new Criterion(condition, value1, value2));
			}

		public Criteria andDeviceIdIsNull()
			{
			addCriterion("device_id is null");
			return (Criteria) this;
			}

		public Criteria andDeviceIdIsNotNull()
			{
			addCriterion("device_id is not null");
			return (Criteria) this;
			}

		public Criteria andDeviceIdEqualTo(Long value)
			{
			addCriterion("device_id =", value, "deviceId");
			return (Criteria) this;
			}

		public Criteria andDeviceIdNotEqualTo(Long value)
			{
			addCriterion("device_id <>", value, "deviceId");
			return (Criteria) this;
			}

		public Criteria andDeviceIdGreaterThan(Long value)
			{
			addCriterion("device_id >", value, "deviceId");
			return (Criteria) this;
			}

		public Criteria andDeviceIdGreaterThanOrEqualTo(Long value)
			{
			addCriterion("device_id >=", value, "deviceId");
			return (Criteria) this;
			}

		public Criteria andDeviceIdLessThan(Long value)
			{
			addCriterion("device_id <", value, "deviceId");
			return (Criteria) this;
			}

		public Criteria andDeviceIdLessThanOrEqualTo(Long value)
			{
			addCriterion("device_id <=", value, "deviceId");
			return (Criteria) this;
			}

		public Criteria andDeviceIdIn(List<Long> values)
			{
			addCriterion("device_id in", values, "deviceId");
			return (Criteria) this;
			}

		public Criteria andDeviceIdNotIn(List<Long> values)
			{
			addCriterion("device_id not in", values, "deviceId");
			return (Criteria) this;
			}

		public Criteria andDeviceIdBetween(Long value1, Long value2)
			{
			addCriterion("device_id between", value1, value2, "deviceId");
			return (Criteria) this;
			}

		public Criteria andDeviceIdNotBetween(Long value1, Long value2)
			{
			addCriterion("device_id not between", value1, value2, "deviceId");
			return (Criteria) this;
			}

		public Criteria andTmIsNull()
			{
			addCriterion("tm is null");
			return (Criteria) this;
			}

		public Criteria andTmIsNotNull()
			{
			addCriterion("tm is not null");
			return (Criteria) this;
			}

		public Criteria andTmEqualTo(Float value)
			{
			addCriterion("tm =", value, "tm");
			return (Criteria) this;
			}

		public Criteria andTmNotEqualTo(Float value)
			{
			addCriterion("tm <>", value, "tm");
			return (Criteria) this;
			}

		public Criteria andTmGreaterThan(Float value)
			{
			addCriterion("tm >", value, "tm");
			return (Criteria) this;
			}

		public Criteria andTmGreaterThanOrEqualTo(Float value)
			{
			addCriterion("tm >=", value, "tm");
			return (Criteria) this;
			}

		public Criteria andTmLessThan(Float value)
			{
			addCriterion("tm <", value, "tm");
			return (Criteria) this;
			}

		public Criteria andTmLessThanOrEqualTo(Float value)
			{
			addCriterion("tm <=", value, "tm");
			return (Criteria) this;
			}

		public Criteria andTmIn(List<Float> values)
			{
			addCriterion("tm in", values, "tm");
			return (Criteria) this;
			}

		public Criteria andTmNotIn(List<Float> values)
			{
			addCriterion("tm not in", values, "tm");
			return (Criteria) this;
			}

		public Criteria andTmBetween(Float value1, Float value2)
			{
			addCriterion("tm between", value1, value2, "tm");
			return (Criteria) this;
			}

		public Criteria andTmNotBetween(Float value1, Float value2)
			{
			addCriterion("tm not between", value1, value2, "tm");
			return (Criteria) this;
			}

		public Criteria andAverageIsNull()
			{
			addCriterion("average is null");
			return (Criteria) this;
			}

		public Criteria andAverageIsNotNull()
			{
			addCriterion("average is not null");
			return (Criteria) this;
			}

		public Criteria andAverageEqualTo(Float value)
			{
			addCriterion("average =", value, "average");
			return (Criteria) this;
			}

		public Criteria andAverageNotEqualTo(Float value)
			{
			addCriterion("average <>", value, "average");
			return (Criteria) this;
			}

		public Criteria andAverageGreaterThan(Float value)
			{
			addCriterion("average >", value, "average");
			return (Criteria) this;
			}

		public Criteria andAverageGreaterThanOrEqualTo(Float value)
			{
			addCriterion("average >=", value, "average");
			return (Criteria) this;
			}

		public Criteria andAverageLessThan(Float value)
			{
			addCriterion("average <", value, "average");
			return (Criteria) this;
			}

		public Criteria andAverageLessThanOrEqualTo(Float value)
			{
			addCriterion("average <=", value, "average");
			return (Criteria) this;
			}

		public Criteria andAverageIn(List<Float> values)
			{
			addCriterion("average in", values, "average");
			return (Criteria) this;
			}

		public Criteria andAverageNotIn(List<Float> values)
			{
			addCriterion("average not in", values, "average");
			return (Criteria) this;
			}

		public Criteria andAverageBetween(Float value1, Float value2)
			{
			addCriterion("average between", value1, value2, "average");
			return (Criteria) this;
			}

		public Criteria andAverageNotBetween(Float value1, Float value2)
			{
			addCriterion("average not between", value1, value2, "average");
			return (Criteria) this;
			}

		public Criteria andCddIsNull()
			{
			addCriterion("cdd is null");
			return (Criteria) this;
			}

		public Criteria andCddIsNotNull()
			{
			addCriterion("cdd is not null");
			return (Criteria) this;
			}

		public Criteria andCddEqualTo(Double value)
			{
			addCriterion("cdd =", value, "cdd");
			return (Criteria) this;
			}

		public Criteria andCddNotEqualTo(Double value)
			{
			addCriterion("cdd <>", value, "cdd");
			return (Criteria) this;
			}

		public Criteria andCddGreaterThan(Double value)
			{
			addCriterion("cdd >", value, "cdd");
			return (Criteria) this;
			}

		public Criteria andCddGreaterThanOrEqualTo(Double value)
			{
			addCriterion("cdd >=", value, "cdd");
			return (Criteria) this;
			}

		public Criteria andCddLessThan(Double value)
			{
			addCriterion("cdd <", value, "cdd");
			return (Criteria) this;
			}

		public Criteria andCddLessThanOrEqualTo(Double value)
			{
			addCriterion("cdd <=", value, "cdd");
			return (Criteria) this;
			}

		public Criteria andCddIn(List<Double> values)
			{
			addCriterion("cdd in", values, "cdd");
			return (Criteria) this;
			}

		public Criteria andCddNotIn(List<Double> values)
			{
			addCriterion("cdd not in", values, "cdd");
			return (Criteria) this;
			}

		public Criteria andCddBetween(Double value1, Double value2)
			{
			addCriterion("cdd between", value1, value2, "cdd");
			return (Criteria) this;
			}

		public Criteria andCddNotBetween(Double value1, Double value2)
			{
			addCriterion("cdd not between", value1, value2, "cdd");
			return (Criteria) this;
			}

		public Criteria andParIsNull()
			{
			addCriterion("par is null");
			return (Criteria) this;
			}

		public Criteria andParIsNotNull()
			{
			addCriterion("par is not null");
			return (Criteria) this;
			}

		public Criteria andParEqualTo(Double value)
			{
			addCriterion("par =", value, "par");
			return (Criteria) this;
			}

		public Criteria andParNotEqualTo(Double value)
			{
			addCriterion("par <>", value, "par");
			return (Criteria) this;
			}

		public Criteria andParGreaterThan(Double value)
			{
			addCriterion("par >", value, "par");
			return (Criteria) this;
			}

		public Criteria andParGreaterThanOrEqualTo(Double value)
			{
			addCriterion("par >=", value, "par");
			return (Criteria) this;
			}

		public Criteria andParLessThan(Double value)
			{
			addCriterion("par <", value, "par");
			return (Criteria) this;
			}

		public Criteria andParLessThanOrEqualTo(Double value)
			{
			addCriterion("par <=", value, "par");
			return (Criteria) this;
			}

		public Criteria andParIn(List<Double> values)
			{
			addCriterion("par in", values, "par");
			return (Criteria) this;
			}

		public Criteria andParNotIn(List<Double> values)
			{
			addCriterion("par not in", values, "par");
			return (Criteria) this;
			}

		public Criteria andParBetween(Double value1, Double value2)
			{
			addCriterion("par between", value1, value2, "par");
			return (Criteria) this;
			}

		public Criteria andParNotBetween(Double value1, Double value2)
			{
			addCriterion("par not between", value1, value2, "par");
			return (Criteria) this;
			}

		public Criteria andSunTimeIsNull()
			{
			addCriterion("sun_time is null");
			return (Criteria) this;
			}

		public Criteria andSunTimeIsNotNull()
			{
			addCriterion("sun_time is not null");
			return (Criteria) this;
			}

		public Criteria andSunTimeEqualTo(Long value)
			{
			addCriterion("sun_time =", value, "sunTime");
			return (Criteria) this;
			}

		public Criteria andSunTimeNotEqualTo(Long value)
			{
			addCriterion("sun_time <>", value, "sunTime");
			return (Criteria) this;
			}

		public Criteria andSunTimeGreaterThan(Long value)
			{
			addCriterion("sun_time >", value, "sunTime");
			return (Criteria) this;
			}

		public Criteria andSunTimeGreaterThanOrEqualTo(Long value)
			{
			addCriterion("sun_time >=", value, "sunTime");
			return (Criteria) this;
			}

		public Criteria andSunTimeLessThan(Long value)
			{
			addCriterion("sun_time <", value, "sunTime");
			return (Criteria) this;
			}

		public Criteria andSunTimeLessThanOrEqualTo(Long value)
			{
			addCriterion("sun_time <=", value, "sunTime");
			return (Criteria) this;
			}

		public Criteria andSunTimeIn(List<Long> values)
			{
			addCriterion("sun_time in", values, "sunTime");
			return (Criteria) this;
			}

		public Criteria andSunTimeNotIn(List<Long> values)
			{
			addCriterion("sun_time not in", values, "sunTime");
			return (Criteria) this;
			}

		public Criteria andSunTimeBetween(Long value1, Long value2)
			{
			addCriterion("sun_time between", value1, value2, "sunTime");
			return (Criteria) this;
			}

		public Criteria andSunTimeNotBetween(Long value1, Long value2)
			{
			addCriterion("sun_time not between", value1, value2, "sunTime");
			return (Criteria) this;
			}

		public Criteria andRawCddIsNull()
			{
			addCriterion("raw_cdd is null");
			return (Criteria) this;
			}

		public Criteria andRawCddIsNotNull()
			{
			addCriterion("raw_cdd is not null");
			return (Criteria) this;
			}

		public Criteria andRawCddEqualTo(Double value)
			{
			addCriterion("raw_cdd =", value, "rawCdd");
			return (Criteria) this;
			}

		public Criteria andRawCddNotEqualTo(Double value)
			{
			addCriterion("raw_cdd <>", value, "rawCdd");
			return (Criteria) this;
			}

		public Criteria andRawCddGreaterThan(Double value)
			{
			addCriterion("raw_cdd >", value, "rawCdd");
			return (Criteria) this;
			}

		public Criteria andRawCddGreaterThanOrEqualTo(Double value)
			{
			addCriterion("raw_cdd >=", value, "rawCdd");
			return (Criteria) this;
			}

		public Criteria andRawCddLessThan(Double value)
			{
			addCriterion("raw_cdd <", value, "rawCdd");
			return (Criteria) this;
			}

		public Criteria andRawCddLessThanOrEqualTo(Double value)
			{
			addCriterion("raw_cdd <=", value, "rawCdd");
			return (Criteria) this;
			}

		public Criteria andRawCddIn(List<Double> values)
			{
			addCriterion("raw_cdd in", values, "rawCdd");
			return (Criteria) this;
			}

		public Criteria andRawCddNotIn(List<Double> values)
			{
			addCriterion("raw_cdd not in", values, "rawCdd");
			return (Criteria) this;
			}

		public Criteria andRawCddBetween(Double value1, Double value2)
			{
			addCriterion("raw_cdd between", value1, value2, "rawCdd");
			return (Criteria) this;
			}

		public Criteria andRawCddNotBetween(Double value1, Double value2)
			{
			addCriterion("raw_cdd not between", value1, value2, "rawCdd");
			return (Criteria) this;
			}

		public Criteria andCastedAtIsNull()
			{
			addCriterion("casted_at is null");
			return (Criteria) this;
			}

		public Criteria andCastedAtIsNotNull()
			{
			addCriterion("casted_at is not null");
			return (Criteria) this;
			}

		public Criteria andCastedAtEqualTo(Date value)
			{
			addCriterion("casted_at =", value, "castedAt");
			return (Criteria) this;
			}

		public Criteria andCastedAtNotEqualTo(Date value)
			{
			addCriterion("casted_at <>", value, "castedAt");
			return (Criteria) this;
			}

		public Criteria andCastedAtGreaterThan(Date value)
			{
			addCriterion("casted_at >", value, "castedAt");
			return (Criteria) this;
			}

		public Criteria andCastedAtGreaterThanOrEqualTo(Date value)
			{
			addCriterion("casted_at >=", value, "castedAt");
			return (Criteria) this;
			}

		public Criteria andCastedAtLessThan(Date value)
			{
			addCriterion("casted_at <", value, "castedAt");
			return (Criteria) this;
			}

		public Criteria andCastedAtLessThanOrEqualTo(Date value)
			{
			addCriterion("casted_at <=", value, "castedAt");
			return (Criteria) this;
			}

		public Criteria andCastedAtIn(List<Date> values)
			{
			addCriterion("casted_at in", values, "castedAt");
			return (Criteria) this;
			}

		public Criteria andCastedAtNotIn(List<Date> values)
			{
			addCriterion("casted_at not in", values, "castedAt");
			return (Criteria) this;
			}

		public Criteria andCastedAtBetween(Date value1, Date value2)
			{
			addCriterion("casted_at between", value1, value2, "castedAt");
			return (Criteria) this;
			}

		public Criteria andCastedAtNotBetween(Date value1, Date value2)
			{
			addCriterion("casted_at not between", value1, value2, "castedAt");
			return (Criteria) this;
			}
		}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to the database table ph2_weather_daily_master
	 * @mbg.generated
	 */
	public static class Criterion
		{
		private String condition;
		private Object value;
		private Object secondValue;
		private boolean noValue;
		private boolean singleValue;
		private boolean betweenValue;
		private boolean listValue;
		private String typeHandler;

		public String getCondition()
			{
			return condition;
			}

		public Object getValue()
			{
			return value;
			}

		public Object getSecondValue()
			{
			return secondValue;
			}

		public boolean isNoValue()
			{
			return noValue;
			}

		public boolean isSingleValue()
			{
			return singleValue;
			}

		public boolean isBetweenValue()
			{
			return betweenValue;
			}

		public boolean isListValue()
			{
			return listValue;
			}

		public String getTypeHandler()
			{
			return typeHandler;
			}

		protected Criterion(String condition)
			{
			super();
			this.condition = condition;
			this.typeHandler = null;
			this.noValue = true;
			}

		protected Criterion(String condition, Object value, String typeHandler)
			{
			super();
			this.condition = condition;
			this.value = value;
			this.typeHandler = typeHandler;
			if (value instanceof List<?>)
				{
				this.listValue = true;
				}
			else
				{
				this.singleValue = true;
				}
			}

		protected Criterion(String condition, Object value)
			{
			this(condition, value, null);
			}

		protected Criterion(String condition, Object value, Object secondValue, String typeHandler)
			{
			super();
			this.condition = condition;
			this.value = value;
			this.secondValue = secondValue;
			this.typeHandler = typeHandler;
			this.betweenValue = true;
			}

		protected Criterion(String condition, Object value, Object secondValue)
			{
			this(condition, value, secondValue, null);
			}
		}

	/**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table ph2_weather_daily_master
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {
        protected Criteria() {
            super();
        }
    }
}