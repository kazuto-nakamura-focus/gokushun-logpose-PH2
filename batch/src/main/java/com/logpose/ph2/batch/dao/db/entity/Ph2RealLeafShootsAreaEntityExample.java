package com.logpose.ph2.batch.dao.db.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class Ph2RealLeafShootsAreaEntityExample {
    /**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table ph2_real_leaf_shoots_area
	 * @mbg.generated  Thu Aug 03 01:50:05 JST 2023
	 */
	protected String orderByClause;
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table ph2_real_leaf_shoots_area
	 * @mbg.generated  Thu Aug 03 01:50:05 JST 2023
	 */
	protected boolean distinct;
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table ph2_real_leaf_shoots_area
	 * @mbg.generated  Thu Aug 03 01:50:05 JST 2023
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ph2_real_leaf_shoots_area
	 * @mbg.generated  Thu Aug 03 01:50:05 JST 2023
	 */
	public Ph2RealLeafShootsAreaEntityExample()
		{
		oredCriteria = new ArrayList<>();
		}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ph2_real_leaf_shoots_area
	 * @mbg.generated  Thu Aug 03 01:50:05 JST 2023
	 */
	public void setOrderByClause(String orderByClause)
		{
		this.orderByClause = orderByClause;
		}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ph2_real_leaf_shoots_area
	 * @mbg.generated  Thu Aug 03 01:50:05 JST 2023
	 */
	public String getOrderByClause()
		{
		return orderByClause;
		}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ph2_real_leaf_shoots_area
	 * @mbg.generated  Thu Aug 03 01:50:05 JST 2023
	 */
	public void setDistinct(boolean distinct)
		{
		this.distinct = distinct;
		}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ph2_real_leaf_shoots_area
	 * @mbg.generated  Thu Aug 03 01:50:05 JST 2023
	 */
	public boolean isDistinct()
		{
		return distinct;
		}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ph2_real_leaf_shoots_area
	 * @mbg.generated  Thu Aug 03 01:50:05 JST 2023
	 */
	public List<Criteria> getOredCriteria()
		{
		return oredCriteria;
		}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ph2_real_leaf_shoots_area
	 * @mbg.generated  Thu Aug 03 01:50:05 JST 2023
	 */
	public void or(Criteria criteria)
		{
		oredCriteria.add(criteria);
		}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ph2_real_leaf_shoots_area
	 * @mbg.generated  Thu Aug 03 01:50:05 JST 2023
	 */
	public Criteria or()
		{
		Criteria criteria = createCriteriaInternal();
		oredCriteria.add(criteria);
		return criteria;
		}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ph2_real_leaf_shoots_area
	 * @mbg.generated  Thu Aug 03 01:50:05 JST 2023
	 */
	public Criteria createCriteria()
		{
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0)
			{
			oredCriteria.add(criteria);
			}
		return criteria;
		}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ph2_real_leaf_shoots_area
	 * @mbg.generated  Thu Aug 03 01:50:05 JST 2023
	 */
	protected Criteria createCriteriaInternal()
		{
		Criteria criteria = new Criteria();
		return criteria;
		}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ph2_real_leaf_shoots_area
	 * @mbg.generated  Thu Aug 03 01:50:05 JST 2023
	 */
	public void clear()
		{
		oredCriteria.clear();
		orderByClause = null;
		distinct = false;
		}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to the database table ph2_real_leaf_shoots_area
	 * @mbg.generated  Thu Aug 03 01:50:05 JST 2023
	 */
	protected abstract static class GeneratedCriteria
		{
		protected List<Criterion> criteria;

		protected GeneratedCriteria()
			{
			super();
			criteria = new ArrayList<>();
			}

		public boolean isValid()
			{
			return criteria.size() > 0;
			}

		public List<Criterion> getAllCriteria()
			{
			return criteria;
			}

		public List<Criterion> getCriteria()
			{
			return criteria;
			}

		protected void addCriterion(String condition)
			{
			if (condition == null)
				{
				throw new RuntimeException(
						"Value for condition cannot be null");
				}
			criteria.add(new Criterion(condition));
			}

		protected void addCriterion(String condition, Object value,
				String property)
			{
			if (value == null)
				{
				throw new RuntimeException(
						"Value for " + property + " cannot be null");
				}
			criteria.add(new Criterion(condition, value));
			}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property)
			{
			if (value1 == null || value2 == null)
				{
				throw new RuntimeException(
						"Between values for " + property + " cannot be null");
				}
			criteria.add(new Criterion(condition, value1, value2));
			}

		protected void addCriterionForJDBCDate(String condition, Date value,
				String property)
			{
			if (value == null)
				{
				throw new RuntimeException(
						"Value for " + property + " cannot be null");
				}
			addCriterion(condition, new java.sql.Date(value.getTime()),
					property);
			}

		protected void addCriterionForJDBCDate(String condition,
				List<Date> values, String property)
			{
			if (values == null || values.size() == 0)
				{
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
				}
			List<java.sql.Date> dateList = new ArrayList<>();
			Iterator<Date> iter = values.iterator();
			while (iter.hasNext())
				{
				dateList.add(new java.sql.Date(iter.next().getTime()));
				}
			addCriterion(condition, dateList, property);
			}

		protected void addCriterionForJDBCDate(String condition, Date value1,
				Date value2, String property)
			{
			if (value1 == null || value2 == null)
				{
				throw new RuntimeException(
						"Between values for " + property + " cannot be null");
				}
			addCriterion(condition, new java.sql.Date(value1.getTime()),
					new java.sql.Date(value2.getTime()), property);
			}

		public Criteria andDeviceIdIsNull()
			{
			addCriterion("device_id is null");
			return (Criteria) this;
			}

		public Criteria andDeviceIdIsNotNull()
			{
			addCriterion("device_id is not null");
			return (Criteria) this;
			}

		public Criteria andDeviceIdEqualTo(Long value)
			{
			addCriterion("device_id =", value, "deviceId");
			return (Criteria) this;
			}

		public Criteria andDeviceIdNotEqualTo(Long value)
			{
			addCriterion("device_id <>", value, "deviceId");
			return (Criteria) this;
			}

		public Criteria andDeviceIdGreaterThan(Long value)
			{
			addCriterion("device_id >", value, "deviceId");
			return (Criteria) this;
			}

		public Criteria andDeviceIdGreaterThanOrEqualTo(Long value)
			{
			addCriterion("device_id >=", value, "deviceId");
			return (Criteria) this;
			}

		public Criteria andDeviceIdLessThan(Long value)
			{
			addCriterion("device_id <", value, "deviceId");
			return (Criteria) this;
			}

		public Criteria andDeviceIdLessThanOrEqualTo(Long value)
			{
			addCriterion("device_id <=", value, "deviceId");
			return (Criteria) this;
			}

		public Criteria andDeviceIdIn(List<Long> values)
			{
			addCriterion("device_id in", values, "deviceId");
			return (Criteria) this;
			}

		public Criteria andDeviceIdNotIn(List<Long> values)
			{
			addCriterion("device_id not in", values, "deviceId");
			return (Criteria) this;
			}

		public Criteria andDeviceIdBetween(Long value1, Long value2)
			{
			addCriterion("device_id between", value1, value2, "deviceId");
			return (Criteria) this;
			}

		public Criteria andDeviceIdNotBetween(Long value1, Long value2)
			{
			addCriterion("device_id not between", value1, value2, "deviceId");
			return (Criteria) this;
			}

		public Criteria andTargetDateIsNull()
			{
			addCriterion("target_date is null");
			return (Criteria) this;
			}

		public Criteria andTargetDateIsNotNull()
			{
			addCriterion("target_date is not null");
			return (Criteria) this;
			}

		public Criteria andTargetDateEqualTo(Date value)
			{
			addCriterionForJDBCDate("target_date =", value, "targetDate");
			return (Criteria) this;
			}

		public Criteria andTargetDateNotEqualTo(Date value)
			{
			addCriterionForJDBCDate("target_date <>", value, "targetDate");
			return (Criteria) this;
			}

		public Criteria andTargetDateGreaterThan(Date value)
			{
			addCriterionForJDBCDate("target_date >", value, "targetDate");
			return (Criteria) this;
			}

		public Criteria andTargetDateGreaterThanOrEqualTo(Date value)
			{
			addCriterionForJDBCDate("target_date >=", value, "targetDate");
			return (Criteria) this;
			}

		public Criteria andTargetDateLessThan(Date value)
			{
			addCriterionForJDBCDate("target_date <", value, "targetDate");
			return (Criteria) this;
			}

		public Criteria andTargetDateLessThanOrEqualTo(Date value)
			{
			addCriterionForJDBCDate("target_date <=", value, "targetDate");
			return (Criteria) this;
			}

		public Criteria andTargetDateIn(List<Date> values)
			{
			addCriterionForJDBCDate("target_date in", values, "targetDate");
			return (Criteria) this;
			}

		public Criteria andTargetDateNotIn(List<Date> values)
			{
			addCriterionForJDBCDate("target_date not in", values, "targetDate");
			return (Criteria) this;
			}

		public Criteria andTargetDateBetween(Date value1, Date value2)
			{
			addCriterionForJDBCDate("target_date between", value1, value2,
					"targetDate");
			return (Criteria) this;
			}

		public Criteria andTargetDateNotBetween(Date value1, Date value2)
			{
			addCriterionForJDBCDate("target_date not between", value1, value2,
					"targetDate");
			return (Criteria) this;
			}

		public Criteria andCountIsNull()
			{
			addCriterion("count is null");
			return (Criteria) this;
			}

		public Criteria andCountIsNotNull()
			{
			addCriterion("count is not null");
			return (Criteria) this;
			}

		public Criteria andCountEqualTo(Integer value)
			{
			addCriterion("count =", value, "count");
			return (Criteria) this;
			}

		public Criteria andCountNotEqualTo(Integer value)
			{
			addCriterion("count <>", value, "count");
			return (Criteria) this;
			}

		public Criteria andCountGreaterThan(Integer value)
			{
			addCriterion("count >", value, "count");
			return (Criteria) this;
			}

		public Criteria andCountGreaterThanOrEqualTo(Integer value)
			{
			addCriterion("count >=", value, "count");
			return (Criteria) this;
			}

		public Criteria andCountLessThan(Integer value)
			{
			addCriterion("count <", value, "count");
			return (Criteria) this;
			}

		public Criteria andCountLessThanOrEqualTo(Integer value)
			{
			addCriterion("count <=", value, "count");
			return (Criteria) this;
			}

		public Criteria andCountIn(List<Integer> values)
			{
			addCriterion("count in", values, "count");
			return (Criteria) this;
			}

		public Criteria andCountNotIn(List<Integer> values)
			{
			addCriterion("count not in", values, "count");
			return (Criteria) this;
			}

		public Criteria andCountBetween(Integer value1, Integer value2)
			{
			addCriterion("count between", value1, value2, "count");
			return (Criteria) this;
			}

		public Criteria andCountNotBetween(Integer value1, Integer value2)
			{
			addCriterion("count not between", value1, value2, "count");
			return (Criteria) this;
			}

		public Criteria andAverageAreaIsNull()
			{
			addCriterion("average_area is null");
			return (Criteria) this;
			}

		public Criteria andAverageAreaIsNotNull()
			{
			addCriterion("average_area is not null");
			return (Criteria) this;
			}

		public Criteria andAverageAreaEqualTo(Float value)
			{
			addCriterion("average_area =", value, "averageArea");
			return (Criteria) this;
			}

		public Criteria andAverageAreaNotEqualTo(Float value)
			{
			addCriterion("average_area <>", value, "averageArea");
			return (Criteria) this;
			}

		public Criteria andAverageAreaGreaterThan(Float value)
			{
			addCriterion("average_area >", value, "averageArea");
			return (Criteria) this;
			}

		public Criteria andAverageAreaGreaterThanOrEqualTo(Float value)
			{
			addCriterion("average_area >=", value, "averageArea");
			return (Criteria) this;
			}

		public Criteria andAverageAreaLessThan(Float value)
			{
			addCriterion("average_area <", value, "averageArea");
			return (Criteria) this;
			}

		public Criteria andAverageAreaLessThanOrEqualTo(Float value)
			{
			addCriterion("average_area <=", value, "averageArea");
			return (Criteria) this;
			}

		public Criteria andAverageAreaIn(List<Float> values)
			{
			addCriterion("average_area in", values, "averageArea");
			return (Criteria) this;
			}

		public Criteria andAverageAreaNotIn(List<Float> values)
			{
			addCriterion("average_area not in", values, "averageArea");
			return (Criteria) this;
			}

		public Criteria andAverageAreaBetween(Float value1, Float value2)
			{
			addCriterion("average_area between", value1, value2, "averageArea");
			return (Criteria) this;
			}

		public Criteria andAverageAreaNotBetween(Float value1, Float value2)
			{
			addCriterion("average_area not between", value1, value2,
					"averageArea");
			return (Criteria) this;
			}

		public Criteria andRealAreaIsNull()
			{
			addCriterion("real_area is null");
			return (Criteria) this;
			}

		public Criteria andRealAreaIsNotNull()
			{
			addCriterion("real_area is not null");
			return (Criteria) this;
			}

		public Criteria andRealAreaEqualTo(Double value)
			{
			addCriterion("real_area =", value, "realArea");
			return (Criteria) this;
			}

		public Criteria andRealAreaNotEqualTo(Double value)
			{
			addCriterion("real_area <>", value, "realArea");
			return (Criteria) this;
			}

		public Criteria andRealAreaGreaterThan(Double value)
			{
			addCriterion("real_area >", value, "realArea");
			return (Criteria) this;
			}

		public Criteria andRealAreaGreaterThanOrEqualTo(Double value)
			{
			addCriterion("real_area >=", value, "realArea");
			return (Criteria) this;
			}

		public Criteria andRealAreaLessThan(Double value)
			{
			addCriterion("real_area <", value, "realArea");
			return (Criteria) this;
			}

		public Criteria andRealAreaLessThanOrEqualTo(Double value)
			{
			addCriterion("real_area <=", value, "realArea");
			return (Criteria) this;
			}

		public Criteria andRealAreaIn(List<Double> values)
			{
			addCriterion("real_area in", values, "realArea");
			return (Criteria) this;
			}

		public Criteria andRealAreaNotIn(List<Double> values)
			{
			addCriterion("real_area not in", values, "realArea");
			return (Criteria) this;
			}

		public Criteria andRealAreaBetween(Double value1, Double value2)
			{
			addCriterion("real_area between", value1, value2, "realArea");
			return (Criteria) this;
			}

		public Criteria andRealAreaNotBetween(Double value1, Double value2)
			{
			addCriterion("real_area not between", value1, value2, "realArea");
			return (Criteria) this;
			}

		public Criteria andCreatedAtIsNull()
			{
			addCriterion("created_at is null");
			return (Criteria) this;
			}

		public Criteria andCreatedAtIsNotNull()
			{
			addCriterion("created_at is not null");
			return (Criteria) this;
			}

		public Criteria andCreatedAtEqualTo(Date value)
			{
			addCriterion("created_at =", value, "createdAt");
			return (Criteria) this;
			}

		public Criteria andCreatedAtNotEqualTo(Date value)
			{
			addCriterion("created_at <>", value, "createdAt");
			return (Criteria) this;
			}

		public Criteria andCreatedAtGreaterThan(Date value)
			{
			addCriterion("created_at >", value, "createdAt");
			return (Criteria) this;
			}

		public Criteria andCreatedAtGreaterThanOrEqualTo(Date value)
			{
			addCriterion("created_at >=", value, "createdAt");
			return (Criteria) this;
			}

		public Criteria andCreatedAtLessThan(Date value)
			{
			addCriterion("created_at <", value, "createdAt");
			return (Criteria) this;
			}

		public Criteria andCreatedAtLessThanOrEqualTo(Date value)
			{
			addCriterion("created_at <=", value, "createdAt");
			return (Criteria) this;
			}

		public Criteria andCreatedAtIn(List<Date> values)
			{
			addCriterion("created_at in", values, "createdAt");
			return (Criteria) this;
			}

		public Criteria andCreatedAtNotIn(List<Date> values)
			{
			addCriterion("created_at not in", values, "createdAt");
			return (Criteria) this;
			}

		public Criteria andCreatedAtBetween(Date value1, Date value2)
			{
			addCriterion("created_at between", value1, value2, "createdAt");
			return (Criteria) this;
			}

		public Criteria andCreatedAtNotBetween(Date value1, Date value2)
			{
			addCriterion("created_at not between", value1, value2, "createdAt");
			return (Criteria) this;
			}

		public Criteria andUpdatedAtIsNull()
			{
			addCriterion("updated_at is null");
			return (Criteria) this;
			}

		public Criteria andUpdatedAtIsNotNull()
			{
			addCriterion("updated_at is not null");
			return (Criteria) this;
			}

		public Criteria andUpdatedAtEqualTo(Date value)
			{
			addCriterion("updated_at =", value, "updatedAt");
			return (Criteria) this;
			}

		public Criteria andUpdatedAtNotEqualTo(Date value)
			{
			addCriterion("updated_at <>", value, "updatedAt");
			return (Criteria) this;
			}

		public Criteria andUpdatedAtGreaterThan(Date value)
			{
			addCriterion("updated_at >", value, "updatedAt");
			return (Criteria) this;
			}

		public Criteria andUpdatedAtGreaterThanOrEqualTo(Date value)
			{
			addCriterion("updated_at >=", value, "updatedAt");
			return (Criteria) this;
			}

		public Criteria andUpdatedAtLessThan(Date value)
			{
			addCriterion("updated_at <", value, "updatedAt");
			return (Criteria) this;
			}

		public Criteria andUpdatedAtLessThanOrEqualTo(Date value)
			{
			addCriterion("updated_at <=", value, "updatedAt");
			return (Criteria) this;
			}

		public Criteria andUpdatedAtIn(List<Date> values)
			{
			addCriterion("updated_at in", values, "updatedAt");
			return (Criteria) this;
			}

		public Criteria andUpdatedAtNotIn(List<Date> values)
			{
			addCriterion("updated_at not in", values, "updatedAt");
			return (Criteria) this;
			}

		public Criteria andUpdatedAtBetween(Date value1, Date value2)
			{
			addCriterion("updated_at between", value1, value2, "updatedAt");
			return (Criteria) this;
			}

		public Criteria andUpdatedAtNotBetween(Date value1, Date value2)
			{
			addCriterion("updated_at not between", value1, value2, "updatedAt");
			return (Criteria) this;
			}
		}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to the database table ph2_real_leaf_shoots_area
	 * @mbg.generated  Thu Aug 03 01:50:05 JST 2023
	 */
	public static class Criterion
		{
		private String condition;
		private Object value;
		private Object secondValue;
		private boolean noValue;
		private boolean singleValue;
		private boolean betweenValue;
		private boolean listValue;
		private String typeHandler;

		public String getCondition()
			{
			return condition;
			}

		public Object getValue()
			{
			return value;
			}

		public Object getSecondValue()
			{
			return secondValue;
			}

		public boolean isNoValue()
			{
			return noValue;
			}

		public boolean isSingleValue()
			{
			return singleValue;
			}

		public boolean isBetweenValue()
			{
			return betweenValue;
			}

		public boolean isListValue()
			{
			return listValue;
			}

		public String getTypeHandler()
			{
			return typeHandler;
			}

		protected Criterion(String condition)
			{
			super();
			this.condition = condition;
			this.typeHandler = null;
			this.noValue = true;
			}

		protected Criterion(String condition, Object value, String typeHandler)
			{
			super();
			this.condition = condition;
			this.value = value;
			this.typeHandler = typeHandler;
			if (value instanceof List<?>)
				{
				this.listValue = true;
				}
			else
				{
				this.singleValue = true;
				}
			}

		protected Criterion(String condition, Object value)
			{
			this(condition, value, null);
			}

		protected Criterion(String condition, Object value, Object secondValue,
				String typeHandler)
			{
			super();
			this.condition = condition;
			this.value = value;
			this.secondValue = secondValue;
			this.typeHandler = typeHandler;
			this.betweenValue = true;
			}

		protected Criterion(String condition, Object value, Object secondValue)
			{
			this(condition, value, secondValue, null);
			}
		}

	/**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table ph2_real_leaf_shoots_area
     *
     * @mbg.generated do_not_delete_during_merge Thu Jul 06 19:21:57 JST 2023
     */
    public static class Criteria extends GeneratedCriteria {
        protected Criteria() {
            super();
        }
    }
}